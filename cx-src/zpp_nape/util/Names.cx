package zpp_nape.util;
$(import);

/**

    pr(x) to mark private fields of public classes
    PR(X) to mark private version of class X
    inv(x) to mark invalidation flag for field x

    keep - type modifier to be used on all classes/methods to avoid removal via dead-code-elimiation
           when building .nape_swc files, this is done implicitly for classes.

    inline - non-critical overriding of keyword, marks method can bed but not
             necessary, can be overriden by NAPE_NO_INLINE directive
    force_inline - critical keyword, even with NAPE_NO_INLINE method will still bed.

    - mark method for physical removal (type modifier)
    flibdel(n) - mark non-static field for removal
    flibstaticdel(n) - mark static field for removal

    assert(assertion,errorstr) - if NAPE_ASSERT && !NAPE_RELEASE_BUILD, check assertion is true
                                 and if not, throw errorstr.
            - use assert_isNaN(x) rather than isNaN(x) [gives better error messages]
            - use assert_isBig(x) to check for NaN, and values too big to be reasonable.

    DEBUG(x) - perform x, unless NAPE_RELEASE_BUILD is set.
    RELEASE(x) - otherwise

    flibopts(N) - metadata for flib to denote actual optional count for constructors

**/

$(mixin global pr(x)  zpp_`x);
$(mixin global PR(x)  ZPP_`x);
$(mixin global inv(x) zip_`x);

$(mixin global elif() else if);

$(mixin global keep()
    #if nape_swc @:$keep #end
);
$(mixin global class keep $class);

$(mixin global inline()
     #if NAPE_NO_INLINE #else $inline #end
);
$(mixin global force_inline $inline);

$(mixin global flibopts(N) #if flib @:$keep function flibopts_`N(){} #end);

$(mixin global flibmdel #if NAPE_NO_INLINE #elseif (flash9&&flib) @:ns("flibdel") #end);
$(mixin global flibdel(n) #if NAPE_NO_INLINE #elseif (flash9&&flib) @:$keep var flibdel_`n:Void->Void; #end);
//$(mixin global flibstaticdel(n) #if NAPE_NO_INLINE #elseif (flash9&&flib) @:$keep static var flibdel_`n:Void->Void; #end);
$(mixin global flibstaticdel(x) $(->));
$(mixin global assert(assertion,errorstr) {
    
});

$(mixin global DEBUG(block)
);

$(mixin global RELEASE(block)
        block
)

$(mixin global Stdis(x, t) Std.isOfType(x,t));

$(mixin global TArray(T) TArray<T>);
$(mixin global newTArray(T,size) {
    new Array<T>();
});
$(mixin global newTArray(T) {
    new Array<T>();
});

$(mixin global property(name,Type,getter,setter)
    public var $name(get,set):Type;
    force_inline function get_`name():Type getter
    force_inline function set_`name(name:Type):Type {
        setter
        return get_`name();
    }
);

$(mixin global property(name,Type,getter)
    public var $name(get,never):Type;
    force_inline function get_`name():Type getter
);
